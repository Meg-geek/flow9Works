import runtime;
import string;
import lingo/pegcode/driver;
import maybe;

ArExp::=ArPlus, ArMult, ArInt;

ArPlus(
	lhs : ArExp,
	rhs : ArExp
);

ArMult(
	lhs : ArExp,
	rhs : ArExp
);

ArInt(
	val : int
);

ArRPN::=RPNop, RPNarg;

RPNarg(
	val : int
);

RPNop::=RPNPlus, RPNmult;

RPNPlus();
RPNmult();

ar2RPN (expr : ArExp)->[ArRPN]{
	switch(expr){
		ArPlus(lhs, rhs) : 
			concat3(ar2RPN(lhs), ar2RPN(rhs), [RPNPlus()]);
		ArMult(lhs, rhs) : 
			concat3(ar2RPN(lhs), ar2RPN(rhs), [RPNmult()]);
		ArInt(val) :
			[RPNarg(val)];
	}
}


RPN2s (expr : [ArRPN]) -> string {
	strGlue( map(expr, \el -> {
		switch(el){
			RPNarg(val) :
				i2s(val);
			RPNPlus():
				"+";
			RPNmult():
				"*";
		}
	}
	), " ");
}


RPN2ar(expr : [ArRPN]) -> ArExp{
	fold(expr, [], \stack, el ->{
		switch(el){
			RPNarg(val) :
				concat(stack, [ArInt(val)]);
			RPNPlus(): {
				newstack = concat(stack, [ArPlus(stack[length(stack) - 1], stack[length(stack) - 2])]);
				removeRange(newstack, length(newstack) - 3, 2);
			}
			RPNmult(): {
				newstack = concat(stack, [ArMult(stack[length(stack) - 1], stack[length(stack) - 2])]);
				removeRange(newstack, length(newstack) - 3, 2);
			}
		}
	})[0]
}

RPN2arM(expr : [ArRPN]) -> Maybe {
	ms = fold(expr, Some([]), \mStack, el -> {
		maybeBind(mStack, \stack -> {
			switch(el){
				RPNarg(val) :
					Some(concat(stack, [ArInt(val)]));
				RPNPlus(): {
					if(length(stack) > 1){
						newstack = concat(stack, [ArPlus(stack[length(stack) - 1], stack[length(stack) - 2])]);
						Some(removeRange(newstack, length(newstack) - 3, 2));
					} else {
						None();
					}
				}
				RPNmult(): {
					if(length(stack) > 1){
						newstack = concat(stack, [ArMult(stack[length(stack) - 1], stack[length(stack) - 2])]);
						Some(removeRange(newstack, length(newstack) - 3, 2));
					} else {
						None();
					}
				}
			}
		})
	});
	switch(ms){
		Some(val): {
				if(length(val) == 1){
						Some(val[0]);
				} else {
					None();
				}
			}
		None():
			None();
	}
}

RPN2i(expr : [ArRPN])-> int{
	fold(expr, [], \stack, el -> {
		switch(el){
			RPNarg(val) :
				concat(stack, [val]);
			RPNPlus(): {
				newstack = concat(stack, [ stack[length(stack) - 1] + stack[length(stack) - 2]]);
				removeRange(newstack, length(newstack) - 3, 2);
			}
			RPNmult(): {
				newstack = concat(stack, [ stack[length(stack) - 1] * stack[length(stack) - 2]]);
				removeRange(newstack, length(newstack) - 3, 2);
			}
		}
	})[0]
}

arExp2i(expr : ArExp)->int{
	switch(expr){
		ArPlus(lhs, rhs) : 
			arExp2i(lhs) + arExp2i(rhs);
		ArMult(lhs, rhs) :
			arExp2i(lhs) * arExp2i(rhs);
		ArInt(val) :
			val;
	}
}


arExp2s(expr : ArExp)->string{
	switch(expr){
		ArPlus(lhs, rhs) : 
			concatStrings(["(", arExp2s(lhs), "+", arExp2s(rhs), ")"]);
		ArMult(lhs, rhs) :
			concatStrings(["(", arExp2s(lhs), "*", arExp2s(rhs), ")"]);
		ArInt(val) :
			i2s(val);
	}
}

s2arExp(s : string) -> ArExp{
	gram = "#include gramm.lingo";
	parsic(compilePegGrammar(gram), s, defaultPegActions)
}

main(){
	test = ArPlus(ArInt(1), ArMult(ArInt(2), ArInt(3))); //7
	println(arExp2i(test));
	println(arExp2s(test));
	println(s2arExp("(2+(3*8))"));
	println(ar2RPN(test));
	println(RPN2s(ar2RPN(test)));
	println(RPN2ar(ar2RPN(test)));
	println(RPN2i(ar2RPN(test)));
	println("Tests for RPN2arM");
	test1 = [RPNarg(5), RPNPlus()];
	println(RPN2arM(test1));
	
	test2 = [RPNarg(5), RPNPlus(), RPNarg(5)];
	println(RPN2arM(test2));
	
	test3 = [RPNarg(5), RPNarg(5), RPNPlus()];
	println(RPN2arM(test3));
	
	println(RPN2arM([]));
}