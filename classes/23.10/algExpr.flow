import runtime;
import string;
import maybe;
import lingo/pegcode/driver;
import ds/tree;
import math/math;

AlgExp ::= AlgPlus, AlgMult, AlgVar, AlgInt, AlgDiv, AlgMinus, AlgUnMin;

AlgUnMin(
	var : AlgExp
);

AlgMinus(
	lhs : AlgExp,
	rhs : AlgExp
);

AlgDiv(
	lhs : AlgExp,
	rhs : AlgExp
);

AlgPlus(
	lhs : AlgExp,
	rhs : AlgExp
);

AlgMult(
	lhs : AlgExp,
	rhs : AlgExp
);

AlgVar(
	var : string
);

AlgInt(
	val : int
);

RatNum(
	num : int,
	denom : int
);
/*
сначала так: неудобные структуры
RatFunc(
	num : PolySum,
	den : PolySum
);
//сумма
PolySum(
	sum : [PolyProd]
);
//произведение
PolyProd(
	coef : RatNum,
	prod : [VarDeg]
);
//переменная и степень
VarDeg(
	var : string,
	deg : int
);
*/

RatFunc(
	num : PolySum,
	den : PolySum
);
//сумма
PolySum(
	sum : Tree<PolyProd, int>
);
//произведение
PolyProd(
	prod : Tree<string, int>
);

multPolySum(lhs : PolySum, rhs : PolySum) -> PolySum{
	foldTree(lhs.sum, makeTree(), \ polyProd, val1, acc -> {
		foldTree(rhs.sum, makeTree(), \polyProd2, val2, iacc - > {
			mergeTreeCustom(polyProd, polyProd2, 
			\ )
		})
	})
}

plusPolySum(polySum1 : PolySum, polySum2 : PolySum) -> PolySum{
	PolySum (mergeTreeCustom(polySum1.sum, polySum2.sum,
		\prod, num1, num2 -> num1 + num2))
}

sumRatF(lhs : RatFunc, rhs : RatFunc) -> RatFunc {
	RatFunc( plusPolySum(multPolySum(lhs.num, rhs.den),
			multPolySum(rhs.num, lhs.den)),
		multPolySum(lhs.den, rhs.den))
}

multRatF(lhs : RatFunc, rhs : RatFunc) -> RatFunc{
	RatFunc(multPolySum(lhs.num, rhs.num), 
			multPolySum(lhs.den, rhs.den))
}

alg2rat(expr: AlgExp) -> RatFunc {
	switch(expr){
		AlgPlus(lhs, rhs) :{
			sumRatF(alg2rat(lhs), alg2rat(rhs))
		} 
		AlgMult(lhs, rhs) :{
			
		}
		AlgInt(val) :{
			
		}
		AlgVar(var) :{
			
		}
		AlgMinus(lhs, rhs) :{
			
		}
		AlgDiv(lhs, rhs) :{
			
		}
		AlgUnMin(var) :{
			
		}
	}
}

ratPlus(left : RatNum, right : RatNum) -> RatNum{
	newNum = left.num * right.denom + right.num * left.denom;
	newDenom = left.denom * right.denom;
	RatNum(newNum/gcd(newDenom, newNum), newDenom/gcd(newDenom, newNum));
}

ratMinus(left : RatNum, right : RatNum) -> RatNum{
	newNum = left.num * right.denom - right.num * left.denom;
	newDenom = left.denom * right.denom;
	RatNum(newNum/gcd(newDenom, newNum), newDenom/gcd(newDenom, newNum));
}

ratMult(left : RatNum, right : RatNum) -> RatNum{
	newNum = left.num * right.num;
	newDenom = left.denom * right.denom;
	RatNum(newNum/gcd(newDenom, newNum), newDenom/gcd(newDenom, newNum));
}

ratDiv(left : RatNum, right : RatNum) -> RatNum{
	newNum = left.num * right.denom;
	newDenom = left.denom * right.num;
	RatNum(newNum/gcd(newDenom, newNum), newDenom/gcd(newDenom, newNum));
}

ratUnMin(arg : RatNum) -> RatNum{
	RatNum(-arg.num, arg.denom);
}

alg2rat(expr : AlgExp, val_var : Tree<string, int>) -> Maybe<RatNum>{
	switch(expr) {
		AlgPlus(lhs, rhs) :{
			mlhs = alg2rat(lhs, val_var);
			mrhs = alg2rat(rhs, val_var);
			if(isSome(mlhs) && isSome(mrhs)){
				left = either(mlhs, RatNum(0 , 1));
				right = either(mrhs, RatNum(0, 1));
				Some(ratPlus(left, right));
			} else {
				None();
			}
		} 
		AlgMult(lhs, rhs) :{
			mlhs = alg2rat(lhs, val_var);
			mrhs = alg2rat(rhs, val_var);
			if(isSome(mlhs) && isSome(mrhs)){
				left = either(mlhs, RatNum(0 , 1));
				right = either(mrhs, RatNum(0, 1));
				Some(ratMult(left, right));
			} else {
				None();
			}
		}
		AlgInt(val) :
			Some(RatNum(val, 1));
		AlgVar(var) : {
			val = lookupTree(val_var, var);
			if(isSome(val)){
				Some(RatNum(either(val, 0), 1));
			} else {
				None();
			}
		}
		AlgMinus(lhs, rhs) :{
			mlhs = alg2rat(lhs, val_var);
			mrhs = alg2rat(rhs, val_var);
			if(isSome(mlhs) && isSome(mrhs)){
				left = either(mlhs, RatNum(0 , 1));
				right = either(mrhs, RatNum(0, 1));
				Some(ratMinus(left, right));
			} else {
				None();
			}
		}
		AlgDiv(lhs, rhs) :{
			mlhs = alg2rat(lhs, val_var);
			mrhs = alg2rat(rhs, val_var);
			if(isSome(mlhs) && isSome(mrhs)){
				left = either(mlhs, RatNum(0 , 1));
				right = either(mrhs, RatNum(0, 1));
				Some(ratDiv(left, right));
			} else {
				None();
			}
		}
		AlgUnMin(var) :{
			rat = alg2rat(var, val_var);
			if(isSome(rat)){
				Some(ratUnMin(either(rat, RatNum(0, 1))));
			} else {
				None();
			}
		}
	}
}

algExp2s(expr : AlgExp) -> string {
	switch(expr){
		AlgPlus(lhs, rhs) : 
			concatStrings(["(", algExp2s(lhs), "+", algExp2s(rhs), ")"]);
		AlgMult(lhs, rhs) :
			concatStrings(["(", algExp2s(lhs), "*", algExp2s(rhs), ")"]);
		AlgInt(val) :
			i2s(val);
		AlgVar(var):
			var;
		AlgDiv(lhs, rhs) : 
			concatStrings(["(", algExp2s(lhs), "/", algExp2s(rhs), ")"]);
		AlgMinus(lhs, rhs) : 
			concatStrings(["(", algExp2s(lhs), "-", algExp2s(rhs), ")"]);
		AlgUnMin(var) : 
			concatStrings(["(", "-", algExp2s(var), ")"]);
	}
}

s2Exp(s : string) -> AlgExp{
	gram = "#include gramm.lingo";
	parsic(compilePegGrammar(gram), s, defaultPegActions)
}

diff(expr : AlgExp, varDif : string) -> AlgExp{
	switch(expr){
		AlgPlus(lhs, rhs) : 
			AlgPlus(diff(lhs, varDif), diff(rhs, varDif));
		AlgMult(lhs, rhs) : {
			AlgPlus(AlgMult(diff(lhs, varDif), rhs),
					AlgMult(lhs, diff(rhs, varDif)));
		}
		AlgInt(val) :
			AlgInt(0);
		AlgVar(var): {
			if(var == varDif){
				AlgInt(1);
			} else {
				AlgInt(0);
			}
		}
		AlgDiv(lhs, rhs) : {
			AlgDiv(AlgMinus(AlgMult(diff(lhs, varDif), rhs), AlgMult(lhs, diff(rhs, varDif))), 
			AlgMult(rhs, rhs));
		}
		AlgMinus(lhs, rhs) : 
			AlgMinus(diff(lhs, varDif), diff(rhs, varDif));
		AlgUnMin(var) : 
			AlgUnMin(diff(var, varDif));
	}
}

simplify(expr : AlgExp) -> AlgExp {
	switch(expr){
		AlgPlus(lhs, rhs) : {
			sLhs = simplify(lhs);
			sRhs = simplify(rhs);
			if(sLhs == AlgInt(0) && sRhs == AlgInt(0)){
				AlgInt(0);
			} else 
			if(sLhs == AlgInt(0)){
				sRhs;
			} else 
			if(sRhs == AlgInt(0)){
				sLhs;
			} else {
				AlgPlus(sLhs, sRhs);
			}
		} 
		AlgMult(lhs, rhs) : {
			sLhs = simplify(lhs);
			sRhs = simplify(rhs);
			if(sLhs == AlgInt(0) || sRhs == AlgInt(0)){
				AlgInt(0);
			} else {
				AlgMult(sLhs, sRhs);
			}
		}
		AlgInt(val) :
			AlgInt(val);
		AlgVar(var): 
			AlgVar(var);
		AlgDiv(lhs, rhs) : {
			if (lhs == AlgInt(0)){
				AlgInt(0);
			} else {
				AlgDiv(simplify(lhs), simplify(rhs));
			}
		}
		AlgMinus(lhs, rhs) : {
			sLhs = simplify(lhs);
			sRhs = simplify(rhs);
			if(sLhs == AlgInt(0) && sRhs == AlgInt(0)){
				AlgInt(0);
			} else 
			if(sLhs == AlgInt(0)){
				AlgUnMin(sRhs);
			} else 
			if(sRhs == AlgInt(0)){
				sLhs;
			} else {
				AlgPlus(sLhs, sRhs);
			}
		}
		AlgUnMin(var) : {
			sVar = simplify(var);
			if(sVar == AlgInt(0)){
				AlgInt(0);
			} else {
				AlgUnMin(sVar);
			}
		}
	}
}

main(){
	
}