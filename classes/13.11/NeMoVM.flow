import runtime;
import lingo/pegcode/driver;
import ds/set;
import ds/array;
import maybe;

ProgramState ::= EmptyState, State;

EmptyState();

State(
	label : int,
	varState : Tree<string, Val>
);

Val::=IntVal, ArrVal;

IntVal(
	val : int
);

ArrVal(
	array : Tree<int, Val>
);

VMProgram (
	operators : [VMOperator],
	declarations : [Declaration]
);

VarType ::= ArrayType, Int;

ArrayType(
	elType : VarType
);

Int();

Declaration(
	name : string,
	type : VarType
);

VMOperator(
	label : int,
	command : VMCommand
);

VMCommand ::= Assignment, ConditionOp, Print;

Assignment(
	varName : string,
	expr : Expr,
	goto : [int]
);

ConditionOp(
	cond : Condition,
	gotoThen : [int],
	gotoElse : [int]
);

Print(
	expr : Expr,
	goto : [int]
);

BinOp(
	op : string,
	lhs : Expr,
	rhs : Expr
);

Condition (
	op : string,
	lhs : Expr,
	rhs : Expr
);

Expr ::= Constant, Variable, App, Upd, BinOp;

Constant (
	val : int
);

Variable (
	name : string
);

App(
	firstArg : Expr,
	secondArg : Expr
);

Upd(
	firstArg : Expr,
	secondArg : Expr,
	thirdArg : Expr
);

s2prog(s : string) -> VMProgram{
	gram = "#include gramm.lingo";
	parsic(compilePegGrammar(gram), s, defaultPegActions)
}

setFromgoto(goto : [int], varState : Tree<string, Val>)->Set<ProgramState>{
	fold(goto, makeSet(), \statesSet, el -> {
		insertSet(statesSet, State(el, varState));
	})
}

printVal(val : Val) -> string{
	switch(val){
		IntVal(intVal):
			i2s(intVal);
		ArrVal(array):
		{
			concatStrings( [ foldTree(array, "[", \index, var, acc->{
				concatStrings([acc, "\n", "index ", i2s(index), " : ", printVal(var)]);
			}) , "]"]);
		}
	}
}

printExpr(expr : Expr, varState : Tree<string, Val>) -> string{
	switch(expr){
		Constant(val):
			i2s(val);
		Variable(name):
		{
			switch(lookupTree(varState, name)){
				None():{
					println("runtime error");
					quit(-1);
					concatStrings(["runtime error"]);
				}
				Some(val): {
					printVal(val);
				}
			}
		}
		App(firstArg, secondArg):
			concatStrings(["app(", printExpr(firstArg, varState), printExpr(secondArg, varState), ")"]);
		Upd(firstArg, secondArg, thirdArg):
			concatStrings(["app(", printExpr(firstArg, varState), printExpr(secondArg, varState), printExpr(thirdArg, varState), ")"]);
		BinOp(op, lhs, rhs):
			concatStrings([printExpr(lhs, varState), op, printExpr(rhs, varState)]);
	}
}

getInt(expr : Expr) -> MayBe<int> {
	switch(expr){
		Constant(val):
			Some(val);
		Variable(name):
		{
			switch(lookupTree(varState, name)){
				None():{
					None();
				}
				Some(val): {
					getInt(val);
				}
			}
		}
		App(firstArg, secondArg):
		{

		}
		Upd(firstArg, secondArg, thirdArg):
			None();
		BinOp(op, lhs, rhs):
		{
			
		}
	}
}

checkCond(cond: Condition, varState : Tree<string, Val>) -> bool {

}

execCommand(command : VMCommand, varState : Tree<string, Val>)->Set<ProgramState>{
	switch(command){
		Assignment(varName, expr, goto):
		{
					
		}
		ConditionOp(cond, gotoThen, gotoElse):
		{
			if(checkCond(cond, varState)){
				setFromgoto(gotoThen, varState);
			} else {
				setFromgoto(gotoElse, varState);
			}
		}
		Print(expr, goto):
		{
			println(printExpr(expr, varState));
			setFromgoto(goto, varState);
		}
	}
}

getNextStates(label : int, varState : Tree<string, Val>, program : VMProgram)->Set<ProgramState>{
	switch (find(program.operators, \el -> {
			el.label == label;
		} )){
		
		None():
			//println("State with label " + i2s(label) + " doesn't exist in program");
			makeSet1(EmptyState());
		Some(val):{
			execCommand(val.command, varState);			
		}
	}
}

step(state : Set<ProgramState>)->Set<ProgramState>{
	foldSet(state, makeSet(), \newSet, state -> {
		switch(state){
			EmptyState():
				newSet;
			State(label, varState):{
				mergeSets(newSet, getNextStates(label, varState, program));
			}
		}
	})
}

stepCheck(stateSet : Set<ProgramState>){
	!forall(set2array(stateSet), \state -> {
		switch(state){
			EmptyState():
				true;
			State(label, varState):
				false;
		}
	})
}

execVMProgram(program : VMProgram, firstState : ProgramState) -> Set<ProgramState>{
	for(makeSet1(firstState), stepCheck, step)
}


main(){
	println(s2prog(getFileContent("example.txt")));
}